#compdef vm

_build_vm_names () {
  local output lines line st id name codename

  output="$(prlctl list -a | grep -v '^UUID')"
  lines=(${(f)output})

  for line in $lines; do
#    st="$(echo $line | awk '{print $2}')"
#
#    case $cmd in
#      start)
#        if [ "$st" = "running" ]; then continue; fi
#        ;;
#      stop|suspend)
#        if [ "$st" != "running" ]; then continue; fi
#        ;;
#    esac

    id="$(echo $line | awk '{print $1}' | sed 's/[{}]//g')"
    name="$(echo $line | awk '{ s = ""; for (i = 4; i <= NF; i++) { if (length(s) > 0) { s = s " " }; s = s $i }; print s }')"
    codename="$(echo $line | grep '(' | cut -d'(' -f2 | cut -d')' -f1 | tr '[:upper:]' '[:lower:]')"

    vm_names+=$id
    vm_names+=$name

    if [[ -n "$codename" ]]; then
      vm_names+=$codename
    fi
  done
}

_build_vm_names_cached () {
  if ( [[ ${(P)+vm_names} -eq 0 ]] || _cache_invalid "vm-names" ) && ! _retrieve_cache "vm-names"; then
    _build_vm_names
    _store_cache "vm-names" vm_names
  fi
}

_vm_caching_policy () {
  local -a oldp

  # rebuild if cache is more than a week old
  oldp=( "$1"(mw+1) )
  (( $#oldp )) && return 0

  return 1
}

## MAIN

local context state state_descr line ret=1 cmd
local -a vm_names

zstyle -s ":completion:${curcontext}:" cache-policy update_policy
if [[ -z "$update_policy" ]]; then
  zstyle ":completion:${curcontext}:" cache-policy _vm_caching_policy
fi

_arguments -C \
  '1:  :->cmds' \
  '2:: :->args' && ret=0

typeset -a cmds
cmds=(
  'start:start a virtual machine'
  'stop:stop a virtual machine'
  'suspend:suspend a virtual machine'
  'status:show status of all virtual machines'
  'list:list all virtual machines'
)

case $state in
  cmds)
    _describe -t commands 'vm command' cmds && ret=0
    ;;
  args)
    cmd=$words[2]
    case $cmd in
      start|stop|suspend)
        _build_vm_names_cached
        _wanted vms expl 'virtual machines' compadd $vm_names && ret=0
        ;;
    esac
esac

return ret
