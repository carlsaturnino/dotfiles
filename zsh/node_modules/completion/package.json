{
  "name": "completion",
  "description": "Completion library for CLI commands",
  "version": "1.0.1",
  "homepage": "https://github.com/twolfson/completion",
  "author": {
    "name": "Todd Wolfson",
    "email": "todd@twolfson.com",
    "url": "http://twolfson.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/twolfson/completion.git"
  },
  "bugs": {
    "url": "https://github.com/twolfson/completion/issues"
  },
  "licenses": [
    {
      "type": "UNLICENSE",
      "url": "https://github.com/twolfson/completion/blob/master/UNLICENSE"
    }
  ],
  "main": "lib/completion",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "line-info": "~0.2.0",
    "clone": "~0.1.16"
  },
  "devDependencies": {
    "mocha": "~1.11.0",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-watch": "~0.4.0"
  },
  "keywords": [
    "complete",
    "completion",
    "shell",
    "auto",
    "tab",
    "cli",
    "bash",
    "zsh"
  ],
  "readme": "# completion [![Build status](https://travis-ci.org/twolfson/completion.png?branch=master)](https://travis-ci.org/twolfson/completion)\n\nCompletion library for CLI commands\n\nThis was built as part of [foundry][], a CLI utility for making releases painless.\n\n[foundry]: https://github.com/twolfson/foundry\n\n```bash\n$ git chec|\n$ git checkout |\n\n$ git checkout dev/|\ndev/hello.world dev/goodbye.moon\n\n$ git chec|dev/\n$ git checkout |dev/\n```\n\n## Getting Started\nInstall the module with: `npm install completion`\n\n```js\nvar Completion = require('completion');\nvar completion = new Completion({\n  name: 'git',\n  commands: [{\n    name: 'checkout',\n    completion: function (info, cb) {\n      // For `git checkout dev/|`\n      // info.words.value = ['git', 'checkout', 'dev/']\n      // info.word.partialLeft = 'dev/'\n      var that = this;\n      getGitBranches(function (err, allBranches) {\n        if (err) {\n          return cb(err);\n        }\n\n        // Match 'dev/' === 'dev/' (from 'dev/hello')\n        var partialLeftWord = info.word.partialLeft;\n        var branches = that.matchLeftWord(partialLeftWord, allBranches);\n        cb(null, branches);\n      });\n    }\n  }]\n});\ncompletion.complete({\n  // `git chec|`\n  line: 'git chec',\n  cursor: 8\n}, function (err, results) {\n  results; // ['checkout']\n});\n```\n\n## How it works\nIn `bash`, tab completion will override the the left half of the current word.\n\nAs a result, for cases like:\n\n```bash\n$ git chec|\n$ git checkout| # requires ['checkout'] to be returned\n```\n\nUnfortunately, while we can deal with commands, we cannot predict the values of those.\n\nYou will still be responsible for handling of right partials in the autocompleted items.\n\n```bash\n$ git checkout a|c\n[\n  'abc', # `git checkout abc` - Checkout `abc` branch\n  'aaa' # `git checkout aaa c` - Chekckout `c` file from `aaa` branch\n]\n```\n\n## Documentation\n`completion` exposes the `Completion` constructor via its `module.exports`\n\n### `new Completion(tree)`\nCreate a new `completion` instance\n\n- tree `Object` - Outline of a program/command\n    - name `String` - Command that is being executed (e.g. `git`, `checkout`)\n    - options `Object[]` - Optional array of objects that represent options\n        - name `String` - Name of option (e.g. `--help`)\n        - completion `Function` - Optional function to complete the remainder of the invocation\n            - If no `completion` is specified, we assume this is terminal and stop recursing\n            - More info is available in the [`commands/option completion` section][command-completion-section]\n    - commands `Object[]` - Optional array of new `tree` instances to complete against\n        - This cannot exist on the same node as `completion` as they are contradictory\n    - completion `Function` - Optional completion function to determine results for a command\n        - More info is available in the [`commands/option completion` section][command-completion-section]\n\n[command-completion-section]: #commandoption-completion-functions\n\n#### `completion.complete(params, cb)`\nGet potential completion matches for given parameters\n\n- params `Object` - Information similar to that passed in by `bash's` tab completion\n    - line `String` - Input to complete against (similar to `COMP_LINE`)\n    - cursor `Number` - Index within `line` of the cursor (similar to `COMP_POINT`)\n- cb `Function` - Error-first callback function that receives matches\n    - `cb` should have a signature of `function (err, results)`\n\n#### `command/option completion` functions\n`options` and `commands` share a common completion function signature, `function (info, cb)`\n\nEach `completion` function will be executed with the command node as its `this` context\n\n- info `Object` - Information about original input\n    - Content will be information from [twolfson/line-info][]\n    - We provide 2 additional properties\n        - words.matchedLeft `String[]` - Words matched from `words.partialLeft` while walking the tree\n        - words.remainingLeft `String[]` - Unmatched words that need to be/can be matched against\n- cb `Function` - Error-first callback function to return matches via\n    - `cb` has a signature of `function (err, results)`\n\n[twolfson/line-info]: https://github.com/twolfson/line-info#lineinfoparams\n\nFor options, it is often preferred to remove more words that are matched (e.g. `-m <msg>`). For this, we suggest using the [`shiftLeftWord` method][shift-left-word].\n\nFor completing partial matches, we provide the [`matchLeftWord` method][match-left-word].\n\nTo create non-terminal options, we can use the [method `resolveInfo`][resolve-info] to keep on searching against the `remainingLeft` words.\n\n[shift-left-word]: #completionshiftleftwordinfo\n[match-left-word]: #completionmatchleftwordleftword-words\n[resolve-info]: #completionresolveinfoinfo-cb\n\n#### `completion.shiftLeftWord(info)`\nHelper function to shift word from `info.words.remainingLeft` to `info.words.matchedLeft`\n\n- info `Object` - Information passed into `completion` functon\n\n```js\nvar info = {words: {remainingLeft: ['hello', 'world'], matchedLeft: []}};\ninfo = this.shiftLeftWord(info);\ninfo; // {words: {remainingLeft: ['world'], matchedLeft: ['hello']}}\n```\n\n#### `completion.matchLeftWord(leftWord, words)`\nHelper function to find words from `words` that start with `leftWord`\n\n- leftWord `String` - Word to match left content of\n    - `leftWord` gets its name from usually coming from `words.partialLeft`\n- words `String[]` - Array of words to filter against\n\nReturns:\n\n- matchedWords `String[]` - Matching words from `words` that start with `leftWord`\n\n```js\nthis.matchLeftWord('hello', ['hello-world', 'hello-there', 'goodbye-moon']);\n// ['hello-world', 'hello-there'];\n```\n\n#### `completion.resolveInfo(info, cb)`\nRecursively find matches against the `Completion's tree` with a given `info`\n\n- info `Object` - CLI information provided by [twolfson/line-info][]\n    - This is converted from `params` to its current equivalent by [twolfson/line-info][]\n- cb `Function` - Error first callback function that receives matches\n    - `cb` should be the same as in `completion.complete`\n\n## Examples\nAn example of `git` would be\n\n```js\nvar gitCompletion = new Completion({\n  name: 'git',\n  options: [{\n    // `git --help`, a terminal option\n    name: '--help'\n  }],\n  commands: [{\n    // `git checkout master`\n    name: 'checkout',\n    option: [{\n      // `git checkout -b dev/hello`\n      name: '-b',\n      completion: function (info, cb) {\n        // `-b` was matched by `completion` so keep on recursing\n        return this.resolveInfo(info, cb);\n      }\n    }],\n    completion: function getGitBranches (info, cb) {\n      // Get git branches and find matches\n    }\n  }, {\n    name: 'remote',\n    commands: [{\n      // `git remote add origin git@github.com:...`\n      // No possible completion here\n      name: 'add'\n    }, {\n      // `git remote rm origin`\n      name: 'rm',\n      completion: function getGitBranches (info, cb) {\n        // Get git branches and find matches\n      }\n    }]\n  }]\n});\n\ngitCompletion.complete({\n  // `git remo|add`\n  line: 'git remoadd',\n  cursor: 8\n}, function (err, results) {\n  results; // ['remote']\n});\n\ngitCompletion.complete({\n  // `git remote |`\n  line: 'git remote ',\n  cursor: 11\n}, function (err, results) {\n  results; // ['add', 'remove']\n});\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint via [grunt](https://github.com/gruntjs/grunt) and test via `npm test`.\n\n## Donating\nSupport this project and [others by twolfson][gittip] via [gittip][].\n\n[![Support via Gittip][gittip-badge]][gittip]\n\n[gittip-badge]: https://rawgithub.com/twolfson/gittip-badge/master/dist/gittip.png\n[gittip]: https://www.gittip.com/twolfson/\n\n## Unlicense\nAs of Dec 15 2013, Todd Wolfson has released this repository and its contents to the public domain.\n\nIt has been released under the [UNLICENSE][].\n\n[UNLICENSE]: UNLICENSE\n",
  "readmeFilename": "README.md",
  "_id": "completion@1.0.1",
  "dist": {
    "shasum": "428e7b7514d2656a6991a7d4f28a9beebcce1c26"
  },
  "_from": "completion@",
  "_resolved": "https://registry.npmjs.org/completion/-/completion-1.0.1.tgz"
}
